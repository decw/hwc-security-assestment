#!/usr/bin/env python3
"""
Generador de reportes espec√≠fico para IAM
Genera JSON y resumen detallado con secciones
"""

import json
import csv
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, List
import pandas as pd

from config.settings import REPORTS_DIR, CLIENT_NAME, REPORT_TIMESTAMP
from utils.logger import SecurityLogger


class IAMReportGenerator:
    """Generador de reportes IAM con resumen detallado"""

    def __init__(self, iam_results: Dict[str, Any]):
        self.results = iam_results
        self.timestamp = REPORT_TIMESTAMP
        self.logger = SecurityLogger('IAMReportGenerator')

    # --------------------------------------------------------------------- #
    # Helpers                                                                #
    # --------------------------------------------------------------------- #
    def _get_all_findings(self) -> List[Dict[str, Any]]:
        """
        Combina los hallazgos del collector y las vulnerabilidades
        del analizador en una lista com√∫n unificada.
        """
        findings = self.results.get('findings', []).copy()

        # Convertir vulnerabilidades a formato de finding est√°ndar
        for vuln in self.results.get('vulnerabilities', []):
            findings.append(
                {
                    "id": vuln.get("id", ""),
                    "severity": vuln.get("severity", "LOW").upper(),
                    "message": vuln.get("title", ""),
                    "details": vuln.get("description", ""),
                    "timestamp": vuln.get("discovered_date", ""),
                }
            )
        return findings

    def generate_complete_report(self, output_dir: str = None) -> Dict[str, str]:
        """Generar reporte completo: JSON + Resumen detallado"""
        # Siempre usar reports/iam/ como base
        iam_reports_dir = REPORTS_DIR / 'iam'

        # Si se proporciona output_dir, asegurarse de que sea subdirectorio de reports/iam/
        if output_dir:
            output_path = Path(output_dir)
            if not str(output_path).startswith(str(REPORTS_DIR)):
                # Si el directorio proporcionado est√° fuera de reports/, usar reports/iam/
                output_path = iam_reports_dir
        else:
            output_path = iam_reports_dir

        # Asegurar que el directorio existe
        output_path.mkdir(parents=True, exist_ok=True)

        results = {}

        # Generar reportes con manejo de errores individual
        try:
            json_path = self._generate_json_report(output_path)
            results['json'] = str(json_path)
            self.logger.info(f"‚úÖ JSON generado: {json_path}")
        except Exception as e:
            self.logger.error(f"‚ùå Error generando JSON: {e}")
            results['json'] = None

        try:
            summary_path = self._generate_detailed_summary(output_path)
            results['summary'] = str(summary_path)
            self.logger.info(f"‚úÖ Summary generado: {summary_path}")
        except Exception as e:
            self.logger.error(f"‚ùå Error generando summary: {e}")
            import traceback
            self.logger.error(f"Traceback: {traceback.format_exc()}")
            results['summary'] = None

        try:
            csv_path = self._generate_findings_csv(output_path)
            results['csv'] = str(csv_path)
            self.logger.info(f"‚úÖ CSV generado: {csv_path}")
        except Exception as e:
            self.logger.error(f"‚ùå Error generando CSV: {e}")
            results['csv'] = None

        try:
            remediation_path = self._generate_remediation_plan(output_path)
            results['remediation'] = str(remediation_path)
            self.logger.info(
                f"‚úÖ Plan de remediaci√≥n generado: {remediation_path}")
        except Exception as e:
            self.logger.error(f"‚ùå Error generando plan de remediaci√≥n: {e}")
            results['remediation'] = None

        return results

    def _generate_json_report(self, output_path: Path) -> Path:
        """Generar reporte JSON completo"""
        json_path = output_path / f"iam_assessment_{self.timestamp}.json"

        with open(json_path, 'w', encoding='utf-8') as f:
            json.dump(self.results, f, indent=2,
                      ensure_ascii=False, default=str)

        self.logger.info(f"Reporte JSON generado: {json_path}")
        return json_path

    def _generate_detailed_summary(self, output_path: Path) -> Path:
        """Generar resumen detallado con secciones (din√°micas)"""
        summary_path = output_path / f"iam_summary_{self.timestamp}.md"

        # Determinar presencia de inventario
        has_users = len(self.results.get('users', [])) > 0
        has_groups = len(self.results.get('groups', [])) > 0
        has_roles = len(self.results.get('roles', [])) > 0
        has_pols = len(self.results.get('policies', [])) > 0
        has_keys = len(self.results.get('access_keys', [])) > 0

        # Construir TOC din√°mico
        toc_lines = ["## üìã Tabla de Contenidos",
                     "",
                     "1. [Resumen Ejecutivo](#resumen-ejecutivo)"]

        section_writers = []

        if has_users:
            toc_lines.append(
                f"{len(toc_lines)}. [An√°lisis de Usuarios](#an√°lisis-de-usuarios)")
            section_writers.append(self._generate_users_section)

        if has_groups:
            toc_lines.append(
                f"{len(toc_lines)}. [An√°lisis de Grupos](#an√°lisis-de-grupos)")
            section_writers.append(self._generate_groups_section)

        if has_roles:       # solo si realmente hay roles
            toc_lines.append(
                f"{len(toc_lines)}. [An√°lisis de Roles](#an√°lisis-de-roles)")
            section_writers.append(self._generate_roles_section)

        if has_pols:
            toc_lines.append(
                f"{len(toc_lines)}. [An√°lisis de Pol√≠ticas](#an√°lisis-de-pol√≠ticas)")
            section_writers.append(self._generate_policies_section)

        # Secciones siempre presentes
        toc_lines.extend([
            f"{len(toc_lines)}. [Estado de MFA](#estado-de-mfa)",
            f"{len(toc_lines)+1}. [Hallazgos de Seguridad](#hallazgos-de-seguridad)",
            f"{len(toc_lines)+2}. [Estad√≠sticas Generales](#estad√≠sticas-generales)",
            f"{len(toc_lines)+3}. [Recomendaciones](#recomendaciones)",
            f"{len(toc_lines)+4}. [Anexos](#anexos)",
            "---",
            ""
        ])

        try:
            with open(summary_path, 'w', encoding='utf-8') as f:
                # Header
                try:
                    f.write(self._generate_header())
                    self.logger.debug("‚úÖ Header escrito")
                except Exception as e:
                    self.logger.error(f"‚ùå Error en header: {e}")
                    raise

                # TOC din√°mico
                try:
                    f.write("\n".join(toc_lines))
                    self.logger.debug("‚úÖ TOC escrito")
                except Exception as e:
                    self.logger.error(f"‚ùå Error en TOC: {e}")
                    raise

                # Resumen ejecutivo
                try:
                    exec_summary = self._generate_executive_summary()
                    f.write(exec_summary)
                    self.logger.debug(
                        f"‚úÖ Resumen ejecutivo escrito ({len(exec_summary)} chars)")
                except Exception as e:
                    self.logger.error(f"‚ùå Error en resumen ejecutivo: {e}")
                    import traceback
                    self.logger.error(f"Traceback: {traceback.format_exc()}")
                    # Escribir mensaje de error en lugar de fallar completamente
                    f.write(
                        "\n## üéØ Resumen Ejecutivo\n\n‚ùå **Error generando resumen ejecutivo**\n\n")

                # Secciones de inventario (solo si hay datos)
                for i, writer in enumerate(section_writers):
                    try:
                        section_content = writer()
                        f.write(section_content)
                        self.logger.debug(
                            f"‚úÖ Secci√≥n {i+1} escrita ({len(section_content)} chars)")
                    except Exception as e:
                        self.logger.error(f"‚ùå Error en secci√≥n {i+1}: {e}")
                        f.write(f"\n## ‚ùå Error en Secci√≥n {i+1}\n\n")

                # MFA (siempre relevante)
                try:
                    mfa_content = self._generate_mfa_section()
                    f.write(mfa_content)
                    self.logger.debug(
                        f"‚úÖ Secci√≥n MFA escrita ({len(mfa_content)} chars)")
                except Exception as e:
                    self.logger.error(f"‚ùå Error en secci√≥n MFA: {e}")
                    f.write(
                        "\n## üîê Estado de MFA\n\n‚ùå **Error generando secci√≥n MFA**\n\n")

                # Access Keys solo si existen
                if has_keys:
                    try:
                        keys_content = self._generate_access_keys_section()
                        f.write(keys_content)
                        self.logger.debug(
                            f"‚úÖ Secci√≥n Access Keys escrita ({len(keys_content)} chars)")
                    except Exception as e:
                        self.logger.error(
                            f"‚ùå Error en secci√≥n Access Keys: {e}")
                        f.write(
                            "\n## üîë An√°lisis de Access Keys\n\n‚ùå **Error generando secci√≥n Access Keys**\n\n")

                # Hallazgos + estad√≠sticas + recomendaciones + anexos
                sections = [
                    ("Security Findings", self._generate_security_findings_section),
                    ("Statistics", self._generate_statistics_section),
                    ("Recommendations", self._generate_recommendations_section),
                    ("Annexes", self._generate_annexes)
                ]

                for section_name, section_func in sections:
                    try:
                        section_content = section_func()
                        f.write(section_content)
                        self.logger.debug(
                            f"‚úÖ Secci√≥n {section_name} escrita ({len(section_content)} chars)")
                    except Exception as e:
                        self.logger.error(
                            f"‚ùå Error en secci√≥n {section_name}: {e}")
                        f.write(f"\n## ‚ùå Error en {section_name}\n\n")

            self.logger.info(f"Resumen detallado generado: {summary_path}")

            # Verificar que el archivo se escribi√≥ correctamente
            if summary_path.exists():
                file_size = summary_path.stat().st_size
                self.logger.info(f"Archivo generado: {file_size} bytes")
                if file_size < 1000:
                    self.logger.warning(
                        f"‚ö†Ô∏è Archivo muy peque√±o: {file_size} bytes")

            return summary_path

        except Exception as e:
            self.logger.error(f"‚ùå Error cr√≠tico generando summary: {e}")
            import traceback
            self.logger.error(f"Traceback completo: {traceback.format_exc()}")
            raise

    def _generate_header(self) -> str:
        """Generar header del reporte"""
        return f"""# Assessment de Seguridad IAM - {CLIENT_NAME}

**Fecha de Assessment**: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}  
**Versi√≥n del Reporte**: 1.0  
**Clasificaci√≥n**: CONFIDENCIAL  
**Generado por**: Huawei Cloud Security Assessment Tool  

---

"""

    # La funci√≥n previa _generate_toc est√° obsoleta y se mantiene s√≥lo por compatibilidad,
    # pero ahora ya no se llama directamente.

    def _generate_executive_summary(self) -> str:
        """Generar resumen ejecutivo"""
        stats = self.results.get('statistics', {})
        findings = self._get_all_findings()

        # Contar hallazgos por severidad
        severity_counts = {'CRITICAL': 0, 'HIGH': 0, 'MEDIUM': 0, 'LOW': 0}
        for finding in findings:
            severity = finding.get('severity', 'LOW')
            severity_counts[severity] += 1

        total_findings = len(findings)
        total_users = stats.get('total_users', 0)
        mfa_compliance = stats.get('mfa_compliance_rate', 0)

        content = f"""## üéØ Resumen Ejecutivo

### üìä M√©tricas Clave

| M√©trica | Valor |
|---------|-------|
| **Total de Usuarios** | {total_users} |
| **Usuarios sin MFA** | {stats.get('users_without_mfa', 0)} |
| **Tasa de Cumplimiento MFA** | {mfa_compliance:.1f}% |
| **Access Keys Antiguas** | {stats.get('old_access_keys', 0)} |
| **Usuarios Inactivos** | {stats.get('inactive_users', 0)} |
| **Cuentas de Servicio** | {stats.get('service_accounts', 0)} |

### üö® Hallazgos de Seguridad

| Severidad | Cantidad | Porcentaje |
|-----------|----------|------------|
| üî¥ CR√çTICO | {severity_counts['CRITICAL']} | {(severity_counts['CRITICAL']/total_findings*100) if total_findings > 0 else 0:.1f}% |
| üü† ALTO | {severity_counts['HIGH']} | {(severity_counts['HIGH']/total_findings*100) if total_findings > 0 else 0:.1f}% |
| üü° MEDIO | {severity_counts['MEDIUM']} | {(severity_counts['MEDIUM']/total_findings*100) if total_findings > 0 else 0:.1f}% |
| üü¢ BAJO | {severity_counts['LOW']} | {(severity_counts['LOW']/total_findings*100) if total_findings > 0 else 0:.1f}% |

### ‚ö†Ô∏è Principales Riesgos Identificados

"""

        # Agregar los 5 hallazgos m√°s cr√≠ticos
        critical_findings = [f for f in findings if f.get('severity') in [
            'CRITICAL', 'HIGH']]
        critical_findings = sorted(critical_findings, key=lambda x: x.get(
            'severity') == 'CRITICAL', reverse=True)[:5]

        for i, finding in enumerate(critical_findings, 1):
            severity_icon = "üî¥" if finding.get(
                'severity') == 'CRITICAL' else "üü†"
            content += f"{severity_icon} **{i}. {finding.get('message', 'Sin descripci√≥n')}**\n"
            content += f"   - ID: {finding.get('id', 'N/A')}\n"

            # CORREGIDO: Manejar detalles de forma segura para evitar problemas de formato
            details = finding.get('details', {})
            if isinstance(details, dict) and details:
                # Mostrar solo informaci√≥n clave de los detalles
                if 'user_name' in details:
                    content += f"   - Usuario: {details.get('user_name', 'N/A')}\n"
                if 'count' in details:
                    content += f"   - Cantidad: {details.get('count', 'N/A')}\n"
                if 'recommendation' in details:
                    content += f"   - Recomendaci√≥n: {details.get('recommendation', 'N/A')}\n"
                # Agregar m√°s campos seg√∫n sea necesario
            elif details:
                # Si no es diccionario, mostrar como string truncado
                content += f"   - Detalles: {str(details)[:100]}...\n"
            content += "\n"

        content += "---\n\n"
        return content

    def _generate_users_section(self) -> str:
        """Generar secci√≥n de an√°lisis de usuarios"""
        users = self.results.get('users', [])
        stats = self.results.get('statistics', {})

        content = f"""## üë• An√°lisis de Usuarios

###  Resumen General

- **Total de Usuarios**: {len(users)}
- **Usuarios Habilitados**: {sum(1 for u in users if u.get('enabled', True))}
- **Usuarios Deshabilitados**: {sum(1 for u in users if not u.get('enabled', True))}
- **Usuarios Inactivos**: {stats.get('inactive_users', 0)}
- **Cuentas de Servicio**: {stats.get('service_accounts', 0)}

### üîç Detalle de Usuarios

| Usuario | Estado | √öltimo Login | MFA | Grupos | Acceso Admin |
|---------|--------|--------------|-----|--------|--------------|
"""

        for user in users[:10]:  # Mostrar solo los primeros 10
            username = user.get('name', 'N/A')
            enabled = "‚úÖ" if user.get('enabled', True) else "‚ùå"
            last_login = user.get('last_login_time', 'Nunca')[
                :10] if user.get('last_login_time') else 'Nunca'
            mfa_status = "‚úÖ" if user.get('id') not in [u.get('user_id') for u in self.results.get(
                'mfa_status', {}).get('users_without_mfa', [])] else "‚ùå"
            groups = len(self.results.get(
                'user_group_mappings', {}).get(user.get('id'), []))
            admin_access = "" if user.get('id') in [u.get(
                'user_id') for u in self.results.get('privileged_accounts', [])] else "‚úÖ"

            content += f"| {username} | {enabled} | {last_login} | {mfa_status} | {groups} | {admin_access} |\n"

        if len(users) > 10:
            content += f"| ... y {len(users) - 10} usuarios m√°s | | | | | |\n"

        content += "\n### üö® Usuarios Cr√≠ticos\n\n"

        # Usuarios sin MFA
        users_without_mfa = self.results.get(
            'mfa_status', {}).get('users_without_mfa', [])
        if users_without_mfa:
            content += "**Usuarios sin MFA:**\n"
            for user in users_without_mfa[:5]:
                content += f"- {user.get('user_name', 'N/A')}\n"
            if len(users_without_mfa) > 5:
                content += f"- ... y {len(users_without_mfa) - 5} usuarios m√°s\n"
            content += "\n"

        # Usuarios privilegiados
        privileged_users = self.results.get('privileged_accounts', [])
        if privileged_users:
            content += "**Usuarios con Privilegios Administrativos:**\n"
            for user in privileged_users[:5]:
                content += f"- {user.get('user_name', 'N/A')} (fuente: {user.get('privilege_source', 'N/A')})\n"
            if len(privileged_users) > 5:
                content += f"- ... y {len(privileged_users) - 5} usuarios m√°s\n"
            content += "\n"

        content += "---\n\n"
        return content

    def _generate_groups_section(self) -> str:
        """Generar secci√≥n de an√°lisis de grupos"""
        groups = self.results.get('groups', [])

        content = f"""##  An√°lisis de Grupos

###  Resumen General

- **Total de Grupos**: {len(groups)}
- **Grupos con Miembros**: {sum(1 for g in groups if g.get('member_count', 0) > 0)}
- **Grupos Vac√≠os**: {sum(1 for g in groups if g.get('member_count', 0) == 0)}

### üîç Detalle de Grupos

| Grupo | Miembros | Descripci√≥n |
|-------|----------|-------------|
"""

        for group in groups:
            name = group.get('name', 'N/A')
            members = group.get('member_count', 0)
            description = group.get('description', 'Sin descripci√≥n')[:50]

            content += f"| {name} | {members} | {description} |\n"

        content += "\n### üö® Grupos Cr√≠ticos\n\n"

        # Grupos administrativos
        admin_groups = [g for g in groups if any(keyword in g.get('name', '').lower()
                                                 for keyword in ['admin', 'administrator', 'power'])]
        if admin_groups:
            content += "**Grupos Administrativos:**\n"
            for group in admin_groups:
                content += f"- {group.get('name', 'N/A')} ({group.get('member_count', 0)} miembros)\n"
            content += "\n"

        # Grupos vac√≠os
        empty_groups = [g for g in groups if g.get('member_count', 0) == 0]
        if empty_groups:
            content += "**Grupos Vac√≠os (posible limpieza):**\n"
            for group in empty_groups[:5]:
                content += f"- {group.get('name', 'N/A')}\n"
            if len(empty_groups) > 5:
                content += f"- ... y {len(empty_groups) - 5} grupos m√°s\n"
            content += "\n"

        content += "---\n\n"
        return content

    def _generate_roles_section(self) -> str:
        """Generar secci√≥n de an√°lisis de roles"""
        roles = self.results.get('roles', [])

        content = f"""## üé≠ An√°lisis de Roles

###  Resumen General

- **Total de Roles**: {len(roles)}
- **Roles del Sistema**: {sum(1 for r in roles if r.get('type') == 'system')}
- **Roles Personalizados**: {sum(1 for r in roles if r.get('type') == 'custom')}

###  Detalle de Roles

| Rol | Tipo | Descripci√≥n | Referencias |
|-----|------|-------------|-------------|
"""

        for role in roles:
            name = role.get('name', 'N/A')
            role_type = role.get('type', 'N/A')
            description = role.get('description', 'Sin descripci√≥n')[:50]
            references = role.get('references', 0)

            content += f"| {name} | {role_type} | {description} | {references} |\n"

        content += "\n###  Roles Cr√≠ticos\n\n"

        # Roles con permisos excesivos
        excessive_roles = [r for r in roles if r.get('policy') and
                           any(pattern in str(r.get('policy'))
                               for pattern in ['*:*:*', '"Action": ["*"]'])]
        if excessive_roles:
            content += "**Roles con Permisos Excesivos:**\n"
            for role in excessive_roles:
                content += f"- {role.get('name', 'N/A')} ({role.get('type', 'N/A')})\n"
            content += "\n"

        content += "---\n\n"
        return content

    def _generate_policies_section(self) -> str:
        """Generar secci√≥n de an√°lisis de pol√≠ticas"""
        policies = self.results.get('policies', [])
        password_policy = self.results.get('password_policy', {})
        login_policy = self.results.get('login_policy', {})

        content = f"""## üìã An√°lisis de Pol√≠ticas

### üìë Pol√≠ticas IAM
        
**Total de Pol√≠ticas IAM**: {len(policies)}

"""

        # Separar por tipo
        custom_policies = [p for p in policies if p.get('type') == 'custom']
        system_policies = [p for p in policies if p.get('type') == 'system']

        if custom_policies:
            content += f"\n#### Pol√≠ticas Personalizadas ({len(custom_policies)})\n\n"
            content += "| Nombre | Descripci√≥n | Referencias | Creada |\n"
            content += "|--------|-------------|-------------|--------|\n"

            for policy in custom_policies[:10]:
                name = policy.get('name', 'N/A')
                description = (policy.get('description', 'Sin descripci√≥n')[:40] + '...') if len(
                    policy.get('description', '')) > 40 else policy.get('description', 'Sin descripci√≥n')
                references = policy.get('references', 0)
                created = policy.get(
                    'created_at', 'N/A')[:10] if policy.get('created_at') else 'N/A'

                content += f"| {name} | {description} | {references} | {created} |\n"

            if len(custom_policies) > 10:
                content += f"| ... y {len(custom_policies) - 10} pol√≠ticas m√°s | | | |\n"

        if system_policies:
            content += f"\n#### Pol√≠ticas del Sistema ({len(system_policies)})\n\n"
            content += "| Nombre | Tipo | Descripci√≥n |\n"
            content += "|--------|------|-------------|\n"

            for policy in system_policies[:10]:
                name = policy.get('name', 'N/A')
                p_type = policy.get('type', 'system')
                description = (policy.get('description', 'Sin descripci√≥n')[:50] + '...') if len(
                    policy.get('description', '')) > 50 else policy.get('description', 'Sin descripci√≥n')

                content += f"| {name} | {p_type} | {description} |\n"

            if len(system_policies) > 10:
                content += f"| ... y {len(system_policies) - 10} pol√≠ticas m√°s | | |\n"

        # Si no hay pol√≠ticas, mostrar mensaje informativo
        if len(policies) == 0:
            content += """
‚ö†Ô∏è **No se encontraron pol√≠ticas IAM personalizadas**

Esto puede indicar que:
- No hay pol√≠ticas personalizadas creadas en la cuenta
- El usuario no tiene permisos para listar pol√≠ticas
- La API de pol√≠ticas no est√° disponible en esta regi√≥n

Las pol√≠ticas predefinidas del sistema est√°n impl√≠citas en los roles asignados.
"""

        content += f"""
### üîê Pol√≠tica de Contrase√±as

| Configuraci√≥n | Valor Actual | Recomendado | Estado |
|---------------|--------------|-------------|--------|
| Longitud M√≠nima | {password_policy.get('minimum_password_length', 'N/A')} | 12 | {'‚úÖ' if password_policy.get('minimum_password_length', 0) >= 12 else '‚ùå'} |
| Complejidad | {password_policy.get('password_char_combination', 'N/A')} tipos | 3+ tipos | {'‚úÖ' if password_policy.get('password_char_combination', 0) >= 3 else '‚ùå'} |
| Expiraci√≥n | {password_policy.get('password_validity_period', 'N/A')} d√≠as | 90 d√≠as | {'‚úÖ' if 0 < password_policy.get('password_validity_period', 0) <= 90 else '‚ùå'} |
| Historial | {password_policy.get('number_of_recent_passwords_disallowed', 'N/A')} | 5 | {'‚úÖ' if password_policy.get('number_of_recent_passwords_disallowed', 0) >= 5 else '‚ùå'} |

### üîí Pol√≠tica de Login

| Configuraci√≥n | Valor Actual | Recomendado | Estado |
|---------------|--------------|-------------|--------|
| Intentos Fallidos | {login_policy.get('login_failed_times', 'N/A')} | 5 | {'‚úÖ' if 0 < login_policy.get('login_failed_times', 0) <= 5 else '‚ùå'} |
| Bloqueo | {login_policy.get('lockout_duration', 'N/A')} minutos | 30 min | {'‚úÖ' if login_policy.get('lockout_duration', 0) >= 30 else '‚ùå'} |
| Timeout Sesi√≥n | {login_policy.get('session_timeout', 'N/A')} minutos | 480 min | {'‚úÖ' if 0 < login_policy.get('session_timeout', 0) <= 480 else '‚ùå'} |

---

"""
        return content

    def _generate_mfa_section(self) -> str:
        """Generar secci√≥n de an√°lisis de MFA con nuevas categor√≠as"""
        mfa_status = self.results.get('mfa_status', {})
        verification_summary = mfa_status.get('verification_summary', {})

        content = f"""## üîê Estado de MFA y Verificaci√≥n de Acceso

### üìä Resumen General

- **Total de Usuarios con Acceso a Consola**: {verification_summary.get('total_console_users', 0)}
- **MFA Real Habilitado**: {mfa_status.get('mfa_enabled', 0)} ({verification_summary.get('real_mfa_percentage', 0)}%)
- **Verificaci√≥n 2FA Habilitada**: {verification_summary.get('verification_2fa_count', 0)} ({verification_summary.get('verification_2fa_percentage', 0)}%)
- **Sin Verificaci√≥n**: {verification_summary.get('no_verification_count', 0)} ({verification_summary.get('no_verification_percentage', 0)}%)

### üõ°Ô∏è MFA Real (Autenticaci√≥n Multifactor Verdadera)

| M√©todo | Usuarios | Porcentaje |
|--------|----------|------------|
| Virtual MFA Device | {mfa_status.get('mfa_types', {}).get('virtual', 0)} | {round((mfa_status.get('mfa_types', {}).get('virtual', 0) / verification_summary.get('total_console_users', 1)) * 100, 1)}% |
| Security Key | {mfa_status.get('mfa_types', {}).get('security_key', 0)} | {round((mfa_status.get('mfa_types', {}).get('security_key', 0) / verification_summary.get('total_console_users', 1)) * 100, 1)}% |

### üì± Verificaci√≥n 2FA (M√©todos de Verificaci√≥n)

| M√©todo | Usuarios | Porcentaje |
|--------|----------|------------|
| 2FA SMS | {mfa_status.get('verification_methods', {}).get('sms', 0)} | {round((mfa_status.get('verification_methods', {}).get('sms', 0) / verification_summary.get('total_console_users', 1)) * 100, 1)}% |
| 2FA Email | {mfa_status.get('verification_methods', {}).get('email', 0)} | {round((mfa_status.get('verification_methods', {}).get('email', 0) / verification_summary.get('total_console_users', 1)) * 100, 1)}% |
| Virtual MFA (VMFA) | {mfa_status.get('verification_methods', {}).get('vmfa', 0)} | {round((mfa_status.get('verification_methods', {}).get('vmfa', 0) / verification_summary.get('total_console_users', 1)) * 100, 1)}% |

### ‚ö†Ô∏è Sin Verificaci√≥n

| Estado | Usuarios | Porcentaje |
|--------|----------|------------|
| Disabled | {mfa_status.get('verification_methods', {}).get('disabled', 0)} | {verification_summary.get('no_verification_percentage', 0)}% |

### üìà Distribuci√≥n Detallada por Usuario

"""

        # Tabla de usuarios por m√©todo
        users_by_method = {}
        for user_detail in mfa_status.get('login_verification_details', []):
            if user_detail['has_console_access']:
                method = user_detail['login_verification_method']
                if method not in users_by_method:
                    users_by_method[method] = []
                users_by_method[method].append(user_detail)

        for method, users in users_by_method.items():
            if users:
                content += f"\n#### {method} ({len(users)} usuarios)\n\n"
                content += "| Usuario | Tipo de Cuenta | Access Mode |\n"
                content += "|---------|----------------|-------------|\n"

                for user in users[:10]:  # Limitar a 10 usuarios por m√©todo
                    account_type = "üîß Servicio" if user['is_service_account'] else "üë§ Regular"
                    content += f"| {user['user_name']} | {account_type} | {user['access_mode']} |\n"

                if len(users) > 10:
                    content += f"| ... y {len(users) - 10} usuarios m√°s | | |\n"

        content += "\n---\n\n"
        return content

    def _generate_access_keys_section(self) -> str:
        """Generar secci√≥n de an√°lisis de access keys"""
        access_keys = self.results.get('access_keys', [])
        stats = self.results.get('statistics', {})

        content = f"""##  An√°lisis de Access Keys

###  Resumen General

- **Total de Access Keys**: {len(access_keys)}
- **Keys Activas**: {sum(1 for k in access_keys if k.get('status') == 'active')}
- **Keys Inactivas**: {sum(1 for k in access_keys if k.get('status') != 'active')}
- **Keys Antiguas (>90 d√≠as)**: {stats.get('old_access_keys', 0)}
- **Keys Sin Uso**: {stats.get('unused_access_keys', 0)}

### üîç Detalle de Access Keys

| Usuario | Estado | Edad (d√≠as) | √öltimo Uso | Servicio |
|---------|--------|-------------|------------|----------|
"""

        for key in access_keys[:10]:  # Mostrar solo las primeras 10
            user_name = key.get('user_name', 'N/A')
            status = "‚úÖ" if key.get('status') == 'active' else "‚ùå"
            age = key.get('age_days', 0)
            last_used = key.get('last_used_service', 'Nunca')
            service = key.get('last_used_service', 'N/A')

            content += f"| {user_name} | {status} | {age} | {last_used} | {service} |\n"

        if len(access_keys) > 10:
            content += f"| ... y {len(access_keys) - 10} keys m√°s | | | | |\n"

        content += "\n### üö® Access Keys Cr√≠ticas\n\n"

        # Keys antiguas
        old_keys = [k for k in access_keys if k.get(
            'age_days', 0) > 90 and k.get('status') == 'active']
        if old_keys:
            content += "**Access Keys Antiguas (>90 d√≠as):**\n"
            for key in old_keys[:5]:
                content += f"- {key.get('user_name', 'N/A')} ({key.get('age_days', 0)} d√≠as)\n"
            if len(old_keys) > 5:
                content += f"- ... y {len(old_keys) - 5} keys m√°s\n"
            content += "\n"

        # Keys sin uso
        unused_keys = [k for k in access_keys if not k.get(
            'last_used') and k.get('age_days', 0) > 30]
        if unused_keys:
            content += "**Access Keys Sin Uso (>30 d√≠as):**\n"
            for key in unused_keys[:5]:
                content += f"- {key.get('user_name', 'N/A')} ({key.get('age_days', 0)} d√≠as)\n"
            if len(unused_keys) > 5:
                content += f"- ... y {len(unused_keys) - 5} keys m√°s\n"
            content += "\n"

        content += "---\n\n"
        return content

    def _generate_security_findings_section(self) -> str:
        """Generar secci√≥n de hallazgos de seguridad"""
        # Obtener findings del collector
        findings = self.results.get('findings', [])

        # Obtener vulnerabilidades del an√°lisis
        vulnerabilities = self.results.get('vulnerabilities', [])

        content = f"""## üö® Hallazgos de Seguridad

### üìä Resumen de Hallazgos

- **Total de Hallazgos del Collector**: {len(findings)}
- **Total de Vulnerabilidades del An√°lisis**: {len(vulnerabilities)}
"""

        # Mostrar findings del collector
        if findings:
            content += "\n#### üîç Findings del Collector\n\n"
            # Agrupar por severidad
            severity_order = ['CRITICAL', 'HIGH', 'MEDIUM', 'LOW']
            severity_icons = {'CRITICAL': 'üî¥',
                              'HIGH': 'üü†', 'MEDIUM': 'üü°', 'LOW': ''}

            for severity in severity_order:
                severity_findings = [
                    f for f in findings if f.get('severity') == severity]
                if severity_findings:
                    content += f"#### {severity_icons[severity]} {severity}\n\n"

                    for finding in severity_findings:
                        content += f"**{finding.get('id', 'N/A')}**: {finding.get('message', 'Sin descripci√≥n')}\n"
                        details = finding.get('details', {})
                        if details:
                            content += f"- Detalles: {details}\n"
                        content += f"- Timestamp: {finding.get('timestamp', 'N/A')}\n\n"

        # Mostrar vulnerabilidades del an√°lisis
        if vulnerabilities:
            content += "\n#### üö® Vulnerabilidades Identificadas\n\n"
            for vuln in vulnerabilities:
                content += f"**{vuln.get('title', 'Sin t√≠tulo')}**\n"
                content += f"- Severidad: {vuln.get('severity', 'N/A')}\n"
                content += f"- Tipo: {vuln.get('type', 'N/A')}\n"
                content += f"- Descripci√≥n: {vuln.get('description', 'Sin descripci√≥n')}\n\n"

        content += "---\n\n"
        return content

    def _generate_statistics_section(self) -> str:
        """Generar secci√≥n de estad√≠sticas"""
        stats = self.results.get('statistics', {})

        content = f"""##  Estad√≠sticas Generales

### üë• Usuarios

| M√©trica | Valor |
|---------|-------|
| Total de Usuarios | {stats.get('total_users', 0)} |
| Usuarios sin MFA | {stats.get('users_without_mfa', 0)} |
| Tasa de Cumplimiento MFA | {stats.get('mfa_compliance_rate', 0):.1f}% |
| Usuarios Inactivos | {stats.get('inactive_users', 0)} |
| Cuentas de Servicio | {stats.get('service_accounts', 0)} |
| Usuarios Privilegiados | {stats.get('privileged_accounts', 0)} |

###  Access Keys

| M√©trica | Valor |
|---------|-------|
| Total de Access Keys | {stats.get('total_access_keys', 0)} |
| Keys Antiguas (>90 d√≠as) | {stats.get('old_access_keys', 0)} |
| Keys Sin Uso | {stats.get('unused_access_keys', 0)} |

### üé≠ Roles y Pol√≠ticas

| M√©trica | Valor |
|---------|-------|
| Total de Roles | {stats.get('total_roles', 0)} |
| Total de Pol√≠ticas | {stats.get('total_policies', 0)} |
| Total de Grupos | {stats.get('total_groups', 0)} |

### üö® Hallazgos por Severidad

| Severidad | Cantidad |
|-----------|----------|
| CR√çTICO | {stats.get('findings_by_severity', {}).get('CRITICAL', 0)} |
| ALTO | {stats.get('findings_by_severity', {}).get('HIGH', 0)} |
| MEDIO | {stats.get('findings_by_severity', {}).get('MEDIUM', 0)} |
| BAJO | {stats.get('findings_by_severity', {}).get('LOW', 0)} |

---

"""
        return content

    def _generate_recommendations_section(self) -> str:
        """Generar secci√≥n de recomendaciones"""
        findings = self._get_all_findings()

        content = """## üí° Recomendaciones

### üö® Acciones Cr√≠ticas (Inmediatas)

"""

        critical_findings = [
            f for f in findings if f.get('severity') == 'CRITICAL']
        if critical_findings:
            for finding in critical_findings:
                content += f"1. **{finding.get('message', 'Sin descripci√≥n')}**\n"
                content += f"   - ID: {finding.get('id', 'N/A')}\n"
                content += f"   - Acci√≥n: Implementar inmediatamente\n\n"
        else:
            content += "‚úÖ No hay hallazgos cr√≠ticos que requieran acci√≥n inmediata.\n\n"

        content += "### üîß Acciones de Alto Impacto (1-2 semanas)\n\n"

        high_findings = [f for f in findings if f.get('severity') == 'HIGH']
        if high_findings:
            for finding in high_findings[:5]:  # Top 5
                content += f"1. **{finding.get('message', 'Sin descripci√≥n')}**\n"
                content += f"   - ID: {finding.get('id', 'N/A')}\n"
                content += f"   - Acci√≥n: Planificar e implementar\n\n"
        else:
            content += "‚úÖ No hay hallazgos de alto impacto pendientes.\n\n"

        content += "### üìà Mejoras de Seguridad (1 mes)\n\n"

        medium_findings = [
            f for f in findings if f.get('severity') == 'MEDIUM']
        if medium_findings:
            for finding in medium_findings[:3]:  # Top 3
                content += f"1. **{finding.get('message', 'Sin descripci√≥n')}**\n"
                content += f"   - ID: {finding.get('id', 'N/A')}\n"
                content += f"   - Acci√≥n: Evaluar e implementar\n\n"
        else:
            content += "‚úÖ No hay mejoras de seguridad pendientes.\n\n"

        content += "### üéØ Mejores Pr√°cticas Recomendadas\n\n"

        content += """1. **Implementar MFA para todos los usuarios**
   - Configurar MFA obligatorio
   - Usar aplicaciones autenticadoras

2. **Rotar Access Keys regularmente**
   - Establecer pol√≠tica de rotaci√≥n cada 90 d√≠as
   - Eliminar keys no utilizadas

3. **Revisar permisos de usuarios**
   - Implementar principio de menor privilegio
   - Auditar permisos regularmente

4. **Fortalecer pol√≠ticas de contrase√±as**
   - Longitud m√≠nima de 12 caracteres
   - Requerir complejidad adecuada

5. **Monitorear actividad de usuarios**
   - Implementar logging centralizado
   - Revisar logs regularmente

---

"""
        return content

    def _generate_annexes(self) -> str:
        """Generar anexos"""
        return """## üìé Anexos

### A. Configuraci√≥n T√©cnica

- **Herramienta**: Huawei Cloud Security Assessment Tool
- **Versi√≥n**: 1.0
- **Fecha de Assessment**: """ + datetime.now().strftime('%d/%m/%Y %H:%M:%S') + """
- **Alcance**: An√°lisis completo de configuraci√≥n IAM

### B. Metodolog√≠a

El assessment sigui√≥ las mejores pr√°cticas de:
- CIS Benchmarks for Cloud Security
- NIST Cybersecurity Framework
- ISO 27001:2022
- Huawei Cloud Security Best Practices

### C. Contacto

Para consultas sobre este reporte, contactar al equipo de seguridad.

---

*Reporte generado autom√°ticamente por Huawei Cloud Security Assessment Tool*
"""

    def _generate_findings_csv(self, output_path: Path) -> Path:
        """Generar CSV de hallazgos"""
        csv_path = output_path / f"iam_findings_{self.timestamp}.csv"

        with open(csv_path, 'w', newline='', encoding='utf-8') as f:
            writer = csv.writer(f)
            writer.writerow(
                ['ID', 'Severidad', 'Mensaje', 'Detalles', 'Timestamp'])

            for finding in self._get_all_findings():
                writer.writerow([
                    finding.get('id', ''),
                    finding.get('severity', ''),
                    finding.get('message', ''),
                    str(finding.get('details', '')),
                    finding.get('timestamp', '')
                ])

        self.logger.info(f"CSV de hallazgos generado: {csv_path}")
        return csv_path

    def _generate_remediation_plan(self, output_path: Path) -> Path:
        """Generar plan de remediaci√≥n"""
        remediation_path = output_path / \
            f"iam_remediation_plan_{self.timestamp}.md"

        with open(remediation_path, 'w', encoding='utf-8') as f:
            f.write(f"# Plan de Remediaci√≥n IAM - {CLIENT_NAME}\n\n")
            f.write(f"**Fecha**: {datetime.now().strftime('%d/%m/%Y')}\n\n")

            # Agrupar hallazgos por severidad
            severity_groups = {}
            for finding in self._get_all_findings():
                severity = finding.get('severity', 'LOW').upper()
                if severity not in severity_groups:
                    severity_groups[severity] = []
                severity_groups[severity].append(finding)

            # Generar plan por severidad
            severity_order = ['CRITICAL', 'HIGH', 'MEDIUM', 'LOW']
            severity_titles = {
                'CRITICAL': 'Cr√≠ticos (Inmediatos)',
                'HIGH': 'Altos (1-2 semanas)',
                'MEDIUM': 'Medios (1 mes)',
                'LOW': 'Bajos (3 meses)'
            }

            for severity in severity_order:
                if severity in severity_groups:
                    f.write(f"## {severity_titles[severity]}\n\n")

                    for finding in severity_groups[severity]:
                        f.write(
                            f"### {finding.get('id', 'N/A')}: {finding.get('message', 'Sin descripci√≥n')}\n\n")
                        f.write(
                            f"**Descripci√≥n**: {finding.get('message', 'Sin descripci√≥n')}\n\n")
                        f.write(
                            f"**Detalles**: {finding.get('details', {})}\n\n")
                        f.write(
                            f"**Acci√≥n Requerida**: [Pendiente de definir]\n\n")
                        f.write(f"**Responsable**: [Pendiente de asignar]\n\n")
                        f.write(
                            f"**Fecha Objetivo**: [Pendiente de definir]\n\n")
                        f.write("---\n\n")

        self.logger.info(f"Plan de remediaci√≥n generado: {remediation_path}")
        return remediation_path
