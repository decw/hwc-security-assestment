#!/usr/bin/env python3
"""
Analizador de vulnerabilidades para IAM (Identity and Access Management)
Implementa controles IAM-001 a IAM-030 según security_references.csv
"""

from datetime import datetime, timedelta
from typing import Dict, List, Any
from .vulnerability_analyzer_base import VulnerabilityAnalyzerBase, VulnerabilityType


class IAMVulnerabilityAnalyzer(VulnerabilityAnalyzerBase):
    """Analizador específico para vulnerabilidades IAM"""

    def analyze(self, iam_data: Dict) -> List:
        """Analizar vulnerabilidades IAM"""
        self.logger.info("Iniciando análisis de vulnerabilidades IAM")

        # IAM-001: Usuarios con Privilegios Administrativos Excesivos
        self._check_excessive_privileges(iam_data)

        # IAM-002: Ausencia de Autenticación Multifactor (MFA)
        self._check_mfa_status(iam_data)

        # IAM-003: Access Keys Antiguas o No Rotadas
        self._check_access_key_rotation(iam_data)

        # IAM-004: Políticas de Contraseñas Débiles
        self._check_password_policies(iam_data)

        # IAM-005: Usuarios Inactivos
        self._check_inactive_users(iam_data)

        # IAM-006: Permisos Excesivos en Políticas
        self._check_policy_permissions(iam_data)

        # IAM-007: Ausencia de Segregación de Funciones
        self._check_function_segregation(iam_data)

        # IAM-008: Grupos sin Políticas Asociadas
        self._check_groups_without_policies(iam_data)

        # IAM-009: Ausencia de Proceso de Onboarding/Offboarding
        self._check_onboarding_offboarding(iam_data)

        # IAM-010: Cuentas de Servicio sin Rotación
        self._check_service_account_rotation(iam_data)

        # IAM-011: Sin Registro de Accesos Privilegiados
        self._check_privileged_access_logging(iam_data)

        # IAM-012: Políticas IAM Inline Excesivas
        self._check_inline_policies(iam_data)

        # IAM-013: Sin Revisión Periódica de Permisos
        self._check_permission_review(iam_data)

        # IAM-014: Usuarios con Múltiples Access Keys Activas
        self._check_multiple_access_keys(iam_data)

        # IAM-015: Sin Política de Naming Convention
        self._check_naming_convention(iam_data)

        # IAM-016: Roles Cross-Account sin Restricciones
        self._check_cross_account_roles(iam_data)

        # IAM-017: Sin Federación de Identidades
        self._check_identity_federation(iam_data)

        # IAM-018: Políticas con Versiones Antiguas
        self._check_policy_versions(iam_data)

        # IAM-019: Sin Control de Sesiones Concurrentes
        self._check_concurrent_sessions(iam_data)

        # IAM-020: Ausencia de Privileged Access Management
        self._check_pam_implementation(iam_data)

        # IAM-021: Tokens de API sin Expiración
        self._check_api_token_expiration(iam_data)

        # IAM-022: Sin Segregación por Ambiente
        self._check_environment_segregation(iam_data)

        # IAM-023: Roles sin Principio de Confianza Cero
        self._check_zero_trust_principles(iam_data)

        # IAM-024: Sin Auditoría de Cambios IAM
        self._check_iam_change_audit(iam_data)

        # IAM-025: Usuarios Genéricos o Compartidos
        self._check_generic_users(iam_data)

        # IAM-026: Sin Gestión de Identidades Privilegiadas
        self._check_privileged_identity_management(iam_data)

        # IAM-027: Permisos Heredados No Documentados
        self._check_inherited_permissions(iam_data)

        # IAM-028: Sin Break-Glass Procedure
        self._check_break_glass_procedure(iam_data)

        # IAM-029: Certificados sin Gestión Centralizada
        self._check_certificate_management(iam_data)

        # IAM-030: Sin Métricas de Uso IAM
        self._check_iam_metrics(iam_data)

        return self.vulnerabilities

    def _check_excessive_privileges(self, iam_data: Dict):
        """IAM-001: Verificar privilegios administrativos excesivos"""
        privileged_users = []

        # Buscar usuarios con acceso administrativo
        permissions_analysis = iam_data.get('permissions_analysis', {})
        admin_users = permissions_analysis.get('users_with_admin_access', [])

        for admin in admin_users:
            privileged_users.append({
                'user_name': admin.get('user_name', 'Unknown'),
                'source': admin.get('source', 'Unknown')
            })

        if privileged_users:
            self.add_vulnerability(
                code='IAM-001',
                type=VulnerabilityType.AUTHORIZATION,
                affected_resources=[{
                    'type': 'iam_user',
                    'identifiers': [u['user_name'] for u in privileged_users]
                }],
                evidence={
                    'privileged_users': privileged_users,
                    'total_count': len(privileged_users)
                },
                remediation_steps=[
                    "Implementar principio de menor privilegio",
                    "Crear roles específicos para funciones",
                    "Revisar y reducir permisos administrativos",
                    "Implementar acceso justo a tiempo (JIT)"
                ]
            )

    def _check_mfa_status(self, iam_data: Dict):
        """IAM-002: Verificar estado de MFA"""
        users_without_mfa = []

        mfa_status = iam_data.get('mfa_analysis', {})
        users = mfa_status.get('users_without_mfa', [])

        for user in users:
            if user.get('has_login_profile'):
                users_without_mfa.append(user)

        if users_without_mfa:
            self.add_vulnerability(
                code='IAM-002',
                type=VulnerabilityType.AUTHENTICATION,
                affected_resources=[{
                    'type': 'iam_user',
                    'identifiers': [u.get('user_name', 'Unknown') for u in users_without_mfa]
                }],
                evidence={
                    'users_without_mfa': users_without_mfa,
                    'total_count': len(users_without_mfa)
                },
                remediation_steps=[
                    "Habilitar MFA obligatorio para todos los usuarios",
                    "Implementar política de MFA en el dominio",
                    "Configurar MFA virtual o hardware según criticidad"
                ]
            )

    def _check_access_key_rotation(self, iam_data: Dict):
        """IAM-003: Verificar rotación de access keys"""
        old_keys = []
        max_age_days = 90

        for user in iam_data.get('users', []):
            access_keys = user.get('access_keys', [])
            for key in access_keys:
                if key.get('status') == 'Active':
                    created_date = datetime.fromisoformat(
                        key.get('create_date', datetime.now().isoformat()))
                    age_days = (datetime.now() - created_date).days

                    if age_days > max_age_days:
                        old_keys.append({
                            'user': user.get('user_name'),
                            'key_id': key.get('access_key_id', 'Unknown')[-4:],
                            'age_days': age_days
                        })

        if old_keys:
            self.add_vulnerability(
                code='IAM-003',
                type=VulnerabilityType.AUTHENTICATION,
                affected_resources=[{
                    'type': 'access_key',
                    'identifiers': [f"{k['user']}_****{k['key_id']}" for k in old_keys]
                }],
                evidence={
                    'old_keys': old_keys,
                    'total_count': len(old_keys),
                    'max_age_days': max_age_days
                }
            )

    def _check_password_policies(self, iam_data: Dict):
        """IAM-004: Verificar políticas de contraseñas"""
        password_policy = iam_data.get(
            'account_settings', {}).get('password_policy', {})

        if not password_policy:
            self.add_vulnerability(
                code='IAM-004',
                type=VulnerabilityType.AUTHENTICATION,
                evidence={
                    'message': 'No se encontró política de contraseñas configurada'}
            )
        else:
            policy_strength = self._check_password_policy_strength(
                password_policy)
            if policy_strength == 'WEAK':
                self.add_vulnerability(
                    code='IAM-004',
                    type=VulnerabilityType.AUTHENTICATION,
                    evidence={'policy': password_policy,
                              'strength': policy_strength}
                )

    def _check_inactive_users(self, iam_data: Dict):
        """IAM-005: Detectar usuarios inactivos"""
        inactive_users = []
        inactive_threshold_days = 90

        for user in iam_data.get('users', []):
            last_activity = user.get('password_last_used')
            if last_activity:
                last_activity_date = datetime.fromisoformat(last_activity)
                days_inactive = (datetime.now() - last_activity_date).days

                if days_inactive > inactive_threshold_days:
                    inactive_users.append({
                        'user_name': user.get('user_name'),
                        'days_inactive': days_inactive
                    })

        if inactive_users:
            self.add_vulnerability(
                code='IAM-005',
                type=VulnerabilityType.OPERATIONAL,
                affected_resources=[{
                    'type': 'iam_user',
                    'identifiers': [u['user_name'] for u in inactive_users]
                }],
                evidence={
                    # Limitar a 10 para el reporte
                    'inactive_users': inactive_users[:10],
                    'total_count': len(inactive_users),
                    'threshold_days': inactive_threshold_days
                }
            )

    def _check_policy_permissions(self, iam_data: Dict):
        """IAM-006: Verificar permisos excesivos en políticas"""
        overly_permissive_policies = []

        for policy in iam_data.get('policies', []):
            if self._is_policy_overly_permissive(policy):
                overly_permissive_policies.append({
                    'name': policy.get('name', 'Unknown'),
                    'type': policy.get('type', 'Unknown')
                })

        if overly_permissive_policies:
            self.add_vulnerability(
                code='IAM-006',
                type=VulnerabilityType.AUTHORIZATION,
                affected_resources=[{
                    'type': 'iam_policy',
                    'identifiers': [p['name'] for p in overly_permissive_policies]
                }],
                evidence={
                    'policies': overly_permissive_policies,
                    'total_count': len(overly_permissive_policies)
                }
            )

    def _check_function_segregation(self, iam_data: Dict):
        """IAM-007: Verificar segregación de funciones"""
        # Verificar si hay usuarios con múltiples roles conflictivos
        users_with_conflicts = []

        for user in iam_data.get('users', []):
            attached_policies = user.get('attached_policies', [])

            # Buscar combinaciones problemáticas
            has_admin = any('Admin' in p.get('name', '')
                            for p in attached_policies)
            has_audit = any('Audit' in p.get('name', '')
                            for p in attached_policies)

            if has_admin and has_audit:
                users_with_conflicts.append({
                    'user_name': user.get('user_name'),
                    'conflict': 'Admin + Audit roles'
                })

        if users_with_conflicts:
            self.add_vulnerability(
                code='IAM-007',
                type=VulnerabilityType.AUTHORIZATION,
                affected_resources=[{
                    'type': 'iam_user',
                    'identifiers': [u['user_name'] for u in users_with_conflicts]
                }],
                evidence={'conflicting_users': users_with_conflicts}
            )

    def _check_groups_without_policies(self, iam_data: Dict):
        """IAM-008: Grupos sin políticas asociadas"""
        empty_groups = []

        for group in iam_data.get('groups', []):
            if not group.get('attached_policies', []):
                empty_groups.append(group.get('name', 'Unknown'))

        if empty_groups:
            self.add_vulnerability(
                code='IAM-008',
                type=VulnerabilityType.CONFIGURATION,
                affected_resources=[{
                    'type': 'iam_group',
                    'identifiers': empty_groups
                }],
                evidence={'empty_groups': empty_groups}
            )

    def _check_onboarding_offboarding(self, iam_data: Dict):
        """IAM-009: Verificar proceso de onboarding/offboarding"""
        # Verificar si hay usuarios creados recientemente sin grupos asignados
        recent_users_without_groups = []

        for user in iam_data.get('users', []):
            created_date = datetime.fromisoformat(
                user.get('create_date', datetime.now().isoformat()))
            days_since_creation = (datetime.now() - created_date).days

            if days_since_creation < 30 and not user.get('groups', []):
                recent_users_without_groups.append(user.get('user_name'))

        if recent_users_without_groups:
            self.add_vulnerability(
                code='IAM-009',
                type=VulnerabilityType.OPERATIONAL,
                evidence={
                    'users_without_proper_onboarding': recent_users_without_groups,
                    'description': 'Usuarios nuevos sin grupos asignados'
                }
            )

    def _check_service_account_rotation(self, iam_data: Dict):
        """IAM-010: Cuentas de servicio sin rotación"""
        service_accounts = []

        for user in iam_data.get('users', []):
            # Identificar cuentas de servicio por patrones comunes
            user_name = user.get('user_name', '').lower()
            if any(pattern in user_name for pattern in ['svc', 'service', 'app', 'system']):
                # Verificar última rotación de credenciales
                access_keys = user.get('access_keys', [])
                for key in access_keys:
                    if key.get('status') == 'Active':
                        created_date = datetime.fromisoformat(
                            key.get('create_date', datetime.now().isoformat()))
                        age_days = (datetime.now() - created_date).days

                        if age_days > 180:  # 6 meses sin rotación
                            service_accounts.append({
                                'account': user_name,
                                'key_age_days': age_days
                            })

        if service_accounts:
            self.add_vulnerability(
                code='IAM-010',
                type=VulnerabilityType.OPERATIONAL,
                affected_resources=[{
                    'type': 'service_account',
                    'identifiers': [sa['account'] for sa in service_accounts]
                }],
                evidence={'service_accounts': service_accounts}
            )

    def _check_privileged_access_logging(self, iam_data: Dict):
        """IAM-011: Verificar registro de accesos privilegiados"""
        # Verificar si existe configuración de auditoría para acciones privilegiadas
        audit_config = iam_data.get('audit_configuration', {})

        if not audit_config or not audit_config.get('privileged_actions_logged', False):
            self.add_vulnerability(
                code='IAM-011',
                type=VulnerabilityType.LOGGING,
                evidence={
                    'message': 'No se detectó configuración de auditoría para accesos privilegiados'}
            )

    def _check_inline_policies(self, iam_data: Dict):
        """IAM-012: Políticas IAM Inline excesivas"""
        users_with_inline = []

        for user in iam_data.get('users', []):
            inline_policies = user.get('inline_policies', [])
            if len(inline_policies) > 0:
                users_with_inline.append({
                    'user': user.get('user_name'),
                    'count': len(inline_policies)
                })

        if users_with_inline:
            self.add_vulnerability(
                code='IAM-012',
                type=VulnerabilityType.CONFIGURATION,
                affected_resources=[{
                    'type': 'iam_user',
                    'identifiers': [u['user'] for u in users_with_inline]
                }],
                evidence={'users_with_inline_policies': users_with_inline}
            )

    def _check_permission_review(self, iam_data: Dict):
        """IAM-013: Verificar revisión periódica de permisos"""
        # Verificar si hay evidencia de revisiones recientes
        last_review = iam_data.get('compliance_metadata', {}).get(
            'last_permission_review')

        if not last_review:
            self.add_vulnerability(
                code='IAM-013',
                type=VulnerabilityType.OPERATIONAL,
                evidence={
                    'message': 'No se encontró evidencia de revisión periódica de permisos'}
            )

    def _check_multiple_access_keys(self, iam_data: Dict):
        """IAM-014: Usuarios con múltiples access keys activas"""
        users_multiple_keys = []

        for user in iam_data.get('users', []):
            active_keys = [k for k in user.get(
                'access_keys', []) if k.get('status') == 'Active']
            if len(active_keys) > 1:
                users_multiple_keys.append({
                    'user': user.get('user_name'),
                    'active_keys': len(active_keys)
                })

        if users_multiple_keys:
            self.add_vulnerability(
                code='IAM-014',
                type=VulnerabilityType.CONFIGURATION,
                affected_resources=[{
                    'type': 'iam_user',
                    'identifiers': [u['user'] for u in users_multiple_keys]
                }],
                evidence={'users': users_multiple_keys}
            )

    def _check_naming_convention(self, iam_data: Dict):
        """IAM-015: Verificar política de naming convention"""
        non_compliant_resources = []

        # Patrones esperados (ejemplo)
        patterns = {
            'user': r'^usr-[a-z]+-[a-z0-9]+$',
            'group': r'^grp-[a-z]+-[a-z0-9]+$',
            'role': r'^rol-[a-z]+-[a-z0-9]+$'
        }

        import re

        # Verificar usuarios
        for user in iam_data.get('users', []):
            user_name = user.get('user_name', '')
            if not re.match(patterns.get('user', '.*'), user_name.lower()):
                non_compliant_resources.append(
                    {'type': 'user', 'name': user_name})

        if len(non_compliant_resources) > 5:  # Solo reportar si hay muchos casos
            self.add_vulnerability(
                code='IAM-015',
                type=VulnerabilityType.OPERATIONAL,
                evidence={
                    'non_compliant_count': len(non_compliant_resources),
                    'samples': non_compliant_resources[:5]
                }
            )

    def _check_cross_account_roles(self, iam_data: Dict):
        """IAM-016: Roles Cross-Account sin restricciones"""
        unrestricted_roles = []

        for role in iam_data.get('roles', []):
            trust_policy = role.get('assume_role_policy_document', {})

            # Verificar si permite acceso desde cualquier cuenta
            if '*' in str(trust_policy):
                unrestricted_roles.append(role.get('name', 'Unknown'))

        if unrestricted_roles:
            self.add_vulnerability(
                code='IAM-016',
                type=VulnerabilityType.AUTHORIZATION,
                affected_resources=[{
                    'type': 'iam_role',
                    'identifiers': unrestricted_roles
                }],
                evidence={'unrestricted_roles': unrestricted_roles}
            )

    def _check_identity_federation(self, iam_data: Dict):
        """IAM-017: Verificar federación de identidades"""
        identity_providers = iam_data.get('identity_providers', [])

        if not identity_providers:
            self.add_vulnerability(
                code='IAM-017',
                type=VulnerabilityType.CONFIGURATION,
                evidence={
                    'message': 'No se detectó configuración de federación de identidades'}
            )

    def _check_policy_versions(self, iam_data: Dict):
        """IAM-018: Políticas con versiones antiguas"""
        old_policy_versions = []

        for policy in iam_data.get('policies', []):
            versions = policy.get('versions', [])
            if len(versions) > 3:  # Más de 3 versiones indica falta de limpieza
                old_policy_versions.append({
                    'policy': policy.get('name'),
                    'version_count': len(versions)
                })

        if old_policy_versions:
            self.add_vulnerability(
                code='IAM-018',
                type=VulnerabilityType.OPERATIONAL,
                evidence={'policies_with_old_versions': old_policy_versions}
            )

    def _check_concurrent_sessions(self, iam_data: Dict):
        """IAM-019: Verificar control de sesiones concurrentes"""
        session_config = iam_data.get('session_configuration', {})

        if not session_config.get('max_concurrent_sessions'):
            self.add_vulnerability(
                code='IAM-019',
                type=VulnerabilityType.CONFIGURATION,
                evidence={
                    'message': 'No se detectó límite de sesiones concurrentes'}
            )

    def _check_pam_implementation(self, iam_data: Dict):
        """IAM-020: Verificar implementación de PAM"""
        pam_config = iam_data.get('pam_configuration', {})

        if not pam_config or not pam_config.get('enabled', False):
            self.add_vulnerability(
                code='IAM-020',
                type=VulnerabilityType.CONFIGURATION,
                evidence={
                    'message': 'No se detectó implementación de Privileged Access Management'}
            )

    def _check_api_token_expiration(self, iam_data: Dict):
        """IAM-021: Verificar expiración de tokens de API"""
        tokens_without_expiration = []

        # Verificar configuración de tokens temporales
        token_config = iam_data.get('token_configuration', {})

        if not token_config.get('max_session_duration'):
            self.add_vulnerability(
                code='IAM-021',
                type=VulnerabilityType.AUTHENTICATION,
                evidence={
                    'message': 'No se detectó configuración de expiración para tokens de API'}
            )

    def _check_environment_segregation(self, iam_data: Dict):
        """IAM-022: Verificar segregación por ambiente"""
        # Buscar usuarios con acceso a múltiples ambientes
        cross_environment_users = []

        for user in iam_data.get('users', []):
            policies = user.get('attached_policies', [])
            environments = set()

            for policy in policies:
                policy_name = policy.get('name', '').lower()
                if 'prod' in policy_name:
                    environments.add('production')
                if 'dev' in policy_name:
                    environments.add('development')
                if 'test' in policy_name or 'qa' in policy_name:
                    environments.add('testing')

            if len(environments) > 1:
                cross_environment_users.append({
                    'user': user.get('user_name'),
                    'environments': list(environments)
                })

        if cross_environment_users:
            self.add_vulnerability(
                code='IAM-022',
                type=VulnerabilityType.AUTHORIZATION,
                affected_resources=[{
                    'type': 'iam_user',
                    'identifiers': [u['user'] for u in cross_environment_users]
                }],
                evidence={'users': cross_environment_users}
            )

    def _check_zero_trust_principles(self, iam_data: Dict):
        """IAM-023: Verificar principios de confianza cero"""
        # Verificar si hay políticas que confían implícitamente en la red interna
        trust_issues = []

        for policy in iam_data.get('policies', []):
            statements = policy.get('statements', [])
            for statement in statements:
                conditions = statement.get('conditions', {})
                if not conditions:  # Sin condiciones = confianza implícita
                    trust_issues.append(policy.get('name'))
                    break

        if len(trust_issues) > 3:
            self.add_vulnerability(
                code='IAM-023',
                type=VulnerabilityType.AUTHORIZATION,
                evidence={
                    'policies_without_conditions': trust_issues[:5],
                    'total_count': len(trust_issues)
                }
            )

    def _check_iam_change_audit(self, iam_data: Dict):
        """IAM-024: Verificar auditoría de cambios IAM"""
        audit_config = iam_data.get('audit_configuration', {})

        if not audit_config.get('iam_changes_logged', False):
            self.add_vulnerability(
                code='IAM-024',
                type=VulnerabilityType.LOGGING,
                evidence={
                    'message': 'No se detectó auditoría activa para cambios en IAM'}
            )

    def _check_generic_users(self, iam_data: Dict):
        """IAM-025: Detectar usuarios genéricos o compartidos"""
        generic_users = []
        generic_patterns = ['admin', 'user', 'test',
                            'temp', 'shared', 'generic', 'common']

        for user in iam_data.get('users', []):
            user_name = user.get('user_name', '').lower()
            if any(pattern in user_name for pattern in generic_patterns):
                generic_users.append(user.get('user_name'))

        if generic_users:
            self.add_vulnerability(
                code='IAM-025',
                type=VulnerabilityType.OPERATIONAL,
                affected_resources=[{
                    'type': 'iam_user',
                    'identifiers': generic_users
                }],
                evidence={'generic_users': generic_users}
            )

    def _check_privileged_identity_management(self, iam_data: Dict):
        """IAM-026: Verificar gestión de identidades privilegiadas"""
        pim_config = iam_data.get('pim_configuration', {})

        if not pim_config or not pim_config.get('enabled', False):
            self.add_vulnerability(
                code='IAM-026',
                type=VulnerabilityType.CONFIGURATION,
                evidence={
                    'message': 'No se detectó sistema de gestión de identidades privilegiadas'}
            )

    def _check_inherited_permissions(self, iam_data: Dict):
        """IAM-027: Verificar permisos heredados no documentados"""
        undocumented_inheritances = []

        for group in iam_data.get('groups', []):
            # Verificar si hay grupos con nombres que sugieren herencia
            group_name = group.get('name', '').lower()
            if 'inherit' in group_name or 'parent' in group_name:
                if not group.get('description'):
                    undocumented_inheritances.append(group.get('name'))

        if undocumented_inheritances:
            self.add_vulnerability(
                code='IAM-027',
                type=VulnerabilityType.OPERATIONAL,
                evidence={
                    'groups_with_undocumented_inheritance': undocumented_inheritances}
            )

    def _check_break_glass_procedure(self, iam_data: Dict):
        """IAM-028: Verificar procedimiento break-glass"""
        # Buscar usuarios o roles de emergencia
        emergency_accounts = []

        for user in iam_data.get('users', []):
            user_name = user.get('user_name', '').lower()
            if 'emergency' in user_name or 'break' in user_name or 'glass' in user_name:
                emergency_accounts.append(user_name)

        if not emergency_accounts:
            self.add_vulnerability(
                code='IAM-028',
                type=VulnerabilityType.OPERATIONAL,
                evidence={
                    'message': 'No se detectaron cuentas de emergencia (break-glass)'}
            )

    def _check_certificate_management(self, iam_data: Dict):
        """IAM-029: Verificar gestión centralizada de certificados"""
        certificates = iam_data.get('certificates', [])

        if certificates:
            # Verificar si hay certificados próximos a expirar
            expiring_certs = []
            for cert in certificates:
                expiry_date = cert.get('expiry_date')
                if expiry_date:
                    exp_date = datetime.fromisoformat(expiry_date)
                    days_to_expiry = (exp_date - datetime.now()).days
                    if days_to_expiry < 30:
                        expiring_certs.append({
                            'name': cert.get('name'),
                            'days_to_expiry': days_to_expiry
                        })

            if expiring_certs:
                self.add_vulnerability(
                    code='IAM-029',
                    type=VulnerabilityType.OPERATIONAL,
                    evidence={'expiring_certificates': expiring_certs}
                )
        else:
            self.add_vulnerability(
                code='IAM-029',
                type=VulnerabilityType.CONFIGURATION,
                evidence={
                    'message': 'No se detectó gestión centralizada de certificados'}
            )

    def _check_iam_metrics(self, iam_data: Dict):
        """IAM-030: Verificar métricas de uso IAM"""
        metrics_config = iam_data.get('metrics_configuration', {})

        if not metrics_config or not metrics_config.get('iam_metrics_enabled', False):
            self.add_vulnerability(
                code='IAM-030',
                type=VulnerabilityType.MONITORING,
                evidence={
                    'message': 'No se detectaron métricas de uso IAM configuradas'}
            )
