#!/usr/bin/env python3
"""
Analizador de vulnerabilidades - Integración de todos los módulos
"""

from typing import Dict, Any

from .vulnerability_analyzer_modules_iam_network import IAMNetworkVulnerabilityAnalyzer
from .vulnerability_analyzer_modules_storage_monitoring import StorageMonitoringVulnerabilityAnalyzer

class ModuleVulnerabilityAnalyzer(IAMNetworkVulnerabilityAnalyzer, StorageMonitoringVulnerabilityAnalyzer):
    """
    Clase que integra todos los analizadores de módulos específicos.
    Hereda de ambas clases para proporcionar una interfaz unificada.
    """
    
    def __init__(self):
        # Inicializar la clase base común
        super().__init__()
        
    def analyze_all_module_vulnerabilities(self, modules: Dict[str, Any]):
        """
        Método de conveniencia para analizar todos los módulos de una vez.
        Útil cuando se quiere ejecutar todo el análisis modular desde un solo punto.
        """
        # IAM vulnerabilities
        if 'iam' in modules:
            self.analyze_iam_vulnerabilities(modules['iam'])
        
        # Network vulnerabilities
        if 'network' in modules:
            self.analyze_network_vulnerabilities(modules['network'])
        
        # Storage vulnerabilities
        if 'storage' in modules:
            self.analyze_storage_vulnerabilities(modules['storage'])
        
        # Monitoring vulnerabilities
        if 'monitoring' in modules:
            self.analyze_monitoring_vulnerabilities(modules['monitoring'])
        
        # Cross-module vulnerabilities
        self.analyze_cross_module_vulnerabilities(modules)
        
        return self.vulnerabilities